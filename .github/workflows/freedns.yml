name: FreeDNS Registry Data Publisher

on:
  schedule:
    - cron: "0 * * * *" # Runs every hour
  workflow_dispatch: # Allows manual triggering

jobs:
  parse_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and tags

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 lxml

      - name: Run parser script
        id: parser
        run: python parser.py # This should generate fraidex.json (indented)

      - name: Check if fraidex.json was generated
        id: check_json
        run: |
          if [ -f fraidex.json ]; then
            echo "Generated fraidex.json found."
            echo "exists=true" >> $GITHUB_OUTPUT
            if [ -s fraidex.json ]; then
              echo "has_content=true" >> $GITHUB_OUTPUT
            else
              echo "has_content=false" >> $GITHUB_OUTPUT
              echo "Warning: fraidex.json is empty."
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Error: fraidex.json not found after running parser.py!"
            exit 1
          fi

      - name: Create minified JSON version
        if: steps.check_json.outputs.exists == 'true' && steps.check_json.outputs.has_content == 'true'
        run: |
          python -m json.tool fraidex.json fraidex.min.json --no-indent
          # Alternative if json.tool with --no-indent isn't available or behaves unexpectedly in older Pythons:
          # python -c "import json; data = json.load(open('fraidex.json')); json.dump(data, open('fraidex.min.json', 'w'), separators=(',', ':'))"
          echo "Created fraidex.min.json"

      - name: Check if fraidex.min.json was generated
        if: steps.check_json.outputs.exists == 'true' && steps.check_json.outputs.has_content == 'true' # Relies on the first check
        id: check_min_json
        run: |
          if [ -f fraidex.min.json ]; then
            echo "Generated fraidex.min.json found."
            echo "exists=true" >> $GITHUB_OUTPUT
            if [ -s fraidex.min.json ]; then
              echo "has_content=true" >> $GITHUB_OUTPUT
            else
              echo "has_content=false" >> $GITHUB_OUTPUT
              echo "Warning: fraidex.min.json is empty after minification."
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Error: fraidex.min.json not found after minification step!"
            exit 1
          fi

      - name: Set current time for release body
        if: steps.check_min_json.outputs.exists == 'true' && steps.check_min_json.outputs.has_content == 'true'
        id: current_time
        run: echo "time=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Delete previous data-latest release and tag
        if: steps.check_min_json.outputs.exists == 'true' && steps.check_min_json.outputs.has_content == 'true'
        run: |
          echo "Attempting to delete previous 'data-latest' release and tag..."
          gh release delete data-latest -y --cleanup-tag || echo "No previous 'data-latest' release or tag to delete, or deletion failed (which is fine if it didn't exist)."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release and Upload Assets
        if: steps.check_min_json.outputs.exists == 'true' && steps.check_min_json.outputs.has_content == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: | # Use a multi-line string to list multiple files
            fraidex.json
            fraidex.min.json
          tag_name: data-latest
          name: "Latest FreeDNS Data"
          body: |
            Latest FreeDNS domain registry data.
            Updated: ${{ steps.current_time.outputs.time }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
